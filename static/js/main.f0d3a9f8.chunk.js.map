{"version":3,"sources":["components/Card.js","components/CardHolder.js","components/Nav.js","components/MainPage.js","components/Add.js","components/AddPage.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","changedis","a","window","confirm","setState","dis","axios","delete","id","state","this","title","body","className","onClick","aria-hidden","Component","CardHolder","componentDidMount","fetch","dataReceived","json","posts","map","x","key","Nav","to","MainPage","Add","handleChange","event","target","name","value","handleSubmit","preventDefault","post","then","formSubmitted","e","console","log","formsData","type","placeholder","onChange","onSubmit","href","AddPage","App","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f0d3a9f8.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './CardStyle.css'\nimport axios from 'axios'\n\nclass Card extends Component {\n\n    constructor (props) {\n        super(props)\n\n        this.state = {\n            dis: ''\n        }\n\n    }\n\n    changedis = async () => {\n\n        if(window.confirm(\"Are you sure?\")){\n            this.setState({\n                dis: 'nope'\n            })\n\n\n            \n            let reply = await axios.delete(`/api/${this.props.id}`)\n\n        }\n        \n        \n    }\n\n    render () {\n\n        const {title,body} = this.props\n        const {dis} = this.state\n        return (\n            <div className = {`${dis} card`}>\n                <div className=\"titleStyle\">{title}</div>\n                \n                <div className=\"bodyStyle\">{body}</div>\n                <div>\n                    \n                <i onClick={this.changedis} className=\"fa fa-times delet\" aria-hidden=\"true\"></i>\n                   \n                </div>\n            </div>\n        )\n    }\n    \n}\n\nexport default Card","import React, { Component } from 'react'\n//import fetch from 'node-fetch'\nimport Card from './Card'\nimport './CardHolderStyle.css'\n\n\n\nclass CardHolder extends Component {\n    constructor (props) {\n        super(props)\n        this.state = {\n            posts: []\n        }\n\n    }\n\n    componentDidMount = async () => {\n        let dataReceived = await fetch('/api/')\n        \n        dataReceived = await dataReceived.json()\n        \n        this.setState({posts: dataReceived})\n    }\n\n    \n\n    render () {\n        const { posts } = this.state\n        return (\n            <div >\n            \n\n                <div>\n                    {\n                        posts.map(x => <Card key={x.id} id={x.id} title={x.title} body={x.body} />)\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CardHolder","import React from 'react'\nimport './NavStyle.css'\nimport { Link } from 'react-router-dom'\n\nconst Nav = () => {\n    return (\n        <nav className=\"navbar\">\n            \n            \n            <div className=\"ulbox\">\n                <h1>Notepad</h1>\n                <ul className=\"ulstyle\">\n                    <Link to=\"/\">\n                        <li>Home</li>\n                    </Link>\n                    \n                    <Link to=\"/add\">\n                        <li>Add</li>\n                    </Link>\n                </ul>\n\n            </div>\n            \n        </nav>\n    )\n}\n\nexport default Nav","import React from 'react';\nimport './MainPageStyle.css';\nimport CardHolder from './CardHolder'\nimport Nav from './Nav'\n\n\n\nfunction MainPage() {\n  return (\n    <div className=\"MainPage\">\n      \n      <Nav />\n      <CardHolder />\n      \n    </div>\n  );\n}\n\nexport default MainPage;","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom';\nimport './AddStyle.css'\nimport axios from 'axios'\nclass Add extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            formSubmitted: false,\n            title: '',\n            body: ''\n\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name] : event.target.value\n        })\n    }\n\n    handleSubmit = async (event) => {\n        event.preventDefault()\n        try {\n            axios.post('/api/' , this.state)\n                .then(\n                    this.setState({\n                        formSubmitted: true\n                    })\n                )\n    \n        } catch (e) {\n            console.log(e)\n        }\n        \n        \n    }\n\n    render () {\n\n        const { title, body, formSubmitted } = this.state\n        \n\n        let formsData = \n            <div>\n                <input type=\"text\" name=\"title\" placeholder=\"Title\" value={title} onChange={this.handleChange}/>\n                <input type=\"textarea\" name=\"body\" placeholder=\"Body\" value={body} onChange={this.handleChange} />\n                <input type=\"submit\" value=\"Send\" />\n            </div>\n        \n        if(formSubmitted){\n            \n            formsData = <div>\n                <br />\n                <h1>Data Submitted</h1>\n            </div>\n\n        }\n         \n        return(\n            \n            <div className=\"form-style-6\">\n\n                <h1>Add Data</h1>\n                <form onSubmit={this.handleSubmit}>\n\n                    {formsData}\n                    <br />\n \n                    <a href=\"/\">\n                        <input type=\"button\" value=\"Go Back\"/>\n                    </a>\n                </form>\n            </div>\n            \n        )\n        \n    }\n}\n\nexport default Add","import React from 'react'\nimport Add from './Add'\nimport Nav from './Nav'\nimport './AddPageStyle.css'\nconst AddPage = () => {\n    \n    return(\n        <div className=\"AddPage\">\n            <div className=\"Nav\"><Nav /></div>\n            \n            <div className=\"align\">\n                <div />\n                <Add />\n            </div>\n            \n        </div>\n    )\n}\n\nexport default AddPage","import React from 'react';\nimport MainPage from './components/MainPage'\nimport './App'\nimport AddPage from './components/AddPage'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Route path=\"/\" exact component={MainPage} />\n\n        <Route path=\"/add\" component={AddPage} />\n     </div>\n\n    </Router>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}